name: CI/CD Pipeline Develop

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.samuelmorales}}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image (4a, 4b)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        # Asegúrate de que 'TU_USUARIO_DOCKERHUB' sea tu nombre de usuario real aquí
        tags: ${{ secrets.samuelmorales }}/ci-cd-flask-app:latest
        platforms: linux/amd64

    - name: SSH into EC2 and Deploy (4c, 4d)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_samuelmorales }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Desplegando la aplicación en EC2..."
          
          # Crear o asegurarse de que el directorio de la aplicación existe
          mkdir -p ~/app
          cd ~/app

          # Copiar docker-compose.yml y requirements.txt al servidor EC2
          cp "$GITHUB_WORKSPACE/docker-compose.yml" .
          cp "$GITHUB_WORKSPACE/requirements.txt" . # Asumiendo que tu Dockerfile lo necesita
          cp "$GITHUB_WORKSPACE/app.py" . # Copia también el app.py si es necesario para alguna operación directa o rebuild

          # Reemplazar TU_USUARIO_DOCKERHUB con el usuario real en docker-compose.yml
          # Esto es crucial para que 'docker compose pull' funcione con tu imagen
          sed -i 's/TU_USUARIO_DOCKERHUB/${{ secrets.DOCKER_USERNAME }}/g' docker-compose.yml
          
          # Parar y remover contenedores viejos
          docker compose down || true # '|| true' para evitar que falle si no hay contenedores

          # Pull de la nueva imagen y levantar la aplicación
          docker compose pull
          docker compose up -d

          echo "Despliegue completado en EC2."
          
          # 4d: Ejecución de migraciones de base de datos
          # Dado que nuestra aplicación Flask con init_db() se ejecuta en el entrypoint,
          # las migraciones (creación de tablas) se ejecutarán automáticamente al levantar el contenedor.
          echo "La inicialización de la base de datos se maneja al iniciar el contenedor de la aplicación."